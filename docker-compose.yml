version: '3.8'

services:
  traefik:
    image: traefik:v2.7
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
    ports:
      - "80:80"      
      - "8080:8080" 
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - traefik
  frontend:
    build:
      context: ./dish-dash-frontend
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.priority=1"
    ports:
      - "3000:3000"
    networks:
      - traefik
  go-backend:
    build:
      context: ./dishdash-server
      dockerfile: Dockerfile
    container_name: go-backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go-backend.entrypoints=web"
      - "traefik.http.routers.go-backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.go-backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.go-backend.priority=10"
    ports:
      - "8000:8000"
    depends_on:
      - database
    restart: unless-stopped
    env_file:
      - .env

  database:
    restart: unless-stopped
    image: postgres:15
    container_name: database
    volumes:
      - ./dishdash-server/migrations:/docker-entrypoint-initdb.d
      - ~/.pg/dishdash-db:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    env_file:
      - .env
    ports:
      - "1000:8080"
    depends_on:
      - database
      

networks:
  traefik:
